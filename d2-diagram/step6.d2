# Interface
UserRepository: {
  shape: class
  style: {fill: "#f0f0f0"; stroke: "#000000"}
  +getById(id: number): string <<abstract>>
}

# Classes
MySQLUserRepository: {
  shape: class
  +getById(id: number): string
}

MongoUserRepository: {
  shape: class
  +getById(id: number): string
}

UserService: {
  shape: class
  -userRepository: UserRepository
  +constructor(userRepository: UserRepository)
  +getById(id: number): string
}

SimpleIoCContainer: {
  shape: class
  -bindings: Map<string, any>
  +bind(key: string, instance: any)
  +get(key: string): T <<generic>>
}

# Relationships
UserRepository -> MySQLUserRepository: implements
UserRepository -> MongoUserRepository: implements
UserService -> UserRepository: depends
SimpleIoCContainer -> UserService: creates
SimpleIoCContainer -> MongoUserRepository: creates
SimpleIoCContainer -> MySQLUserRepository: creates
